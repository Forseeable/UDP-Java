=-=-=-=-=-=-=-=
|	 API	 |
=-=-=-=-=-=-=-=

provide hollow Plugin, Hook, Event Listener interfaces
user should only be able to hook mc specific classes (in some cases, we explicitly allow hooking of our methods - maybe)

=-=-=-=-=-=-=-=
|	PLUGIN    |
=-=-=-=-=-=-=-=

- unique plugin ids
		{UUID.randomUUID().toString()}

//import events and hook xdddd

@Plugin(
	uuid = "uuid", //NULL by default
	//---------------------------------------------------------------------------------------------------------------------------------------
	//
	//			  OPTIONAL
	//
	//trustLevel per plugin
	//by default trustLevel is 3, cannot be changed no matter what!!!!
	//if UUID is not NULL (meaning plugin is official, on site then send a request to get the trust level
	//also check if the plugin's hash (compiled) equals to database hash, so no tampering has occurred - every time plugin is reloaded !!!
	//e.g. trustLevel = 0 (all access, to mc source & TCP source)
	//trustLevel = 3 (MC source access)
	//---------------------------------------------------------------------------------------------------------------------------------------
	name = "local name",
	description = "local desc",

	version = {"1.7.10", "1.8.9"}
)
public final class SomePlugin implements Plugin, EventTickListener {
	@Hook( //for now no support for field hooking
		id = StdHook.MINECRAFT.RUN, //if ID is specified, ignore class, method, and field and use our hook definitions instead
		class = "net/minecraft/client/Minecraft",
		method = { //method can be array (if multiple plugin version support is specified) or it can be a string e.g. "run"
			@MethodMap(version = "1.7.10", name = "run()V"), //if no descriptor/signature is provided, check "run" against our own mapping system (STD.MAPPINGS) - if it doesn't exist runtimeexception kys izi
			@MethodMap(version = "1.8.9, name = "run()V")
		}

		type = HookType.ACCESS.BEGIN
		/**
		 * HookType {
		 *	  ACCESS { //when the method is called
		 *		  BEGIN,
		 *		  OFFSET, //if type is equal to access.offset, make sure the "offset" is supplied else, just use BEGIN
		 *		  END
		 *	  }
		 * }
		 */
		 offset = 25, //optional

		 version = "1.7.10" //only do hook for 1.7.10

		 //before running hook, make sure parameters of given metod are the same as hooked method (unless the parameters are void/none exist for proxy method)
	)
	private void beginRun(T someParam) {

	}

	@Event(
		type = EventTick.class //type should be array e.g. type = {EventTick.class, EventFuckme.class}
		shouldFireIfDisabled = true //false by default //TODO: rename properly
	)
	private void onSomeEvent(EventTick event) {
		//event gets fired once our event tick is called
	}

	//lets say a user defines a custom event
	@Hook(
		class = "mcNetty",
		method = "sendPacket",
		type = HookType.ACCESS.OFFSET,
		offset = 20,

									  //if local are defined to pass check if params of given method contain varargs
									  //or check if the param length == original param length + 1
		paramsToPassToNewObject = {   //pass local var 1
			1,
			2
		}
	)
	//
	// NOTES
	//
	//  TODO: FINISH PLAN FOR PARAMETER CONTROLLER
	//  FIXME
	public void ourNewEventHook(@ByRef IntParamController p, ParamController otherthing) { //maybe if the user provides the class as an interface?
		int a = 1;
		Controller.getField() //if doesn't exist/not found return NULL
		//controller.getParamAtIndex(0)
	}
}

public final class EventPacket {
	public EventPacket(Class<? extends Packet>) {

	}
	//packet shit e.g. setter, getter
}

public final class EventPacketListener extends EventListener, implements EventPacket {

}
